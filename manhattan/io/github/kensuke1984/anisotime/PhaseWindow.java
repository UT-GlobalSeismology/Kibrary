/**
 * 
 */
package io.github.kensuke1984.anisotime;

import java.awt.Component;
import java.util.Arrays;

import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 * 
 * Window for choosing phases.
 * 
 * @author kensuke
 * 
 * @version 0.0.2
 * 
 */
class PhaseWindow extends javax.swing.JFrame {

	private static final long serialVersionUID = 467880519968141950L;

	/**
	 * Creates new form NewJFrame
	 */
	PhaseWindow() {
		super("phase");
		initComponents();
	}

	private boolean isDiffractionMode;

	void setDiffractionMode(boolean bool) {
		isDiffractionMode = bool;
	}

	synchronized void setPolarity(int i) {
		final ListCellRenderer<? super String> r = jList1.getCellRenderer();
		jList1.setCellRenderer(new ListCellRenderer<String>() {
			@Override
			public java.awt.Component getListCellRendererComponent(JList<? extends String> list, String value,
					int index, boolean isSelected, boolean cellHasFocus) {
				Phase p = Phase.create((String) jList1.getModel().getElementAt(index));
				boolean sh = p.pReaches() == null;
				Component c;
				if (i == 2 && !sh) {
					c = r.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
					c.setEnabled(false);
				} else {
					c = r.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
					if (isDiffractionMode && !p.isDiffracted()) {
						c.setEnabled(false);
						return c;
					}
					c.setEnabled(true);
				}
				return c;
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {
		setLocationRelativeTo(null);
		jScrollPane1 = new javax.swing.JScrollPane();
		jList1 = new javax.swing.JList<>();

		jTextFieldPhaseAdd = GUIInputComponents.createPhaseField();
		jTextFieldPhaseAdd.setText("pP, sS");

		jButtonAdd = new javax.swing.JButton("Add");
		setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		setResizable(false);
		jList1.setBorder(null);

		phaseLists = new DefaultListModel<>();
		jList1.setModel(phaseLists);
		phaseLists.addElement("p");
		phaseLists.addElement("s");
		phaseLists.addElement("P");
		phaseLists.addElement("S");
		phaseLists.addElement("PcP");
		phaseLists.addElement("ScS");
		phaseLists.addElement("Pdiff");
		phaseLists.addElement("Sdiff");
		phaseLists.addElement("PKP");
		phaseLists.addElement("SKS");
		phaseLists.addElement("PKiKP");
		phaseLists.addElement("PKIKP");
		phaseLists.addElement("SKIKS");
		jScrollPane1.setViewportView(jList1);

		jButtonAdd.setToolTipText("");
		// jList1.setSelectedIndex(2);
		jList1.setSelectedIndices(new int[] { 2, 3 });
		jButtonAdd.addActionListener(evt -> {
			String line = jTextFieldPhaseAdd.getText();
			Arrays.stream(line.split(",")).map(str -> str.trim()).filter(str -> phaseLists.indexOf(str) == -1)
					.forEach(phase -> phaseLists.addElement(phase));
		});
		JLabel jLabelShift = new JLabel("Hold SHIFT to select range");
		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194,
										javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabelShift, javax.swing.GroupLayout.PREFERRED_SIZE, 194,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGroup(layout.createSequentialGroup()
								.addComponent(jTextFieldPhaseAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 139,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
								.addComponent(jButtonAdd, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jLabelShift, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
						.addComponent(jTextFieldPhaseAdd, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addComponent(jButtonAdd)).addContainerGap(20, Short.MAX_VALUE)));

		pack();
	}// </editor-fold>

	Phase[] getSelectedPhases() {
		return jList1.getSelectedValuesList().stream().map(Phase::create).toArray(n -> new Phase[n]);
	}

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed"
		// desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase
		 * /tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(PhaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(PhaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(PhaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(PhaseWindow.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> new PhaseWindow().setVisible(true));
	}

	private DefaultListModel<String> phaseLists;
	// Variables declaration - do not modify
	private javax.swing.JButton jButtonAdd;
	private javax.swing.JList<String> jList1;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JTextField jTextFieldPhaseAdd;
	// End of variables declaration
}
