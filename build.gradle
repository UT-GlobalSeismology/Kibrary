// Apply the java plugin to add support for Java
plugins { id "de.undercouch.download" version "3.3.0" }
apply plugin: 'java'
//apply plugin: 'eclipse'
sourceCompatibility = 1.8
targetCompatibility = 1.8

def defaultEncoding = 'UTF-8'
[compileJava, compileTestJava]*.options*.encoding = defaultEncoding

//def codename = 'sahagin'
jar.baseName = 'kibrary'
def kibraryhome = "$System.env.HOME/.Kibrary"
version = '0.4.4.2'
task wrapper(type: Wrapper) { gradleVersion = '4.8.1' }

repositories {
    mavenCentral()
}
dependencies {
    compile 'org.apache.commons:commons-math3:+'
    compile 'org.apache.commons:commons-lang3:+'
    compile 'commons-io:commons-io:+'
    compile 'commons-net:commons-net:+'
    compile 'org.apache.commons:commons-email:+'
    compile 'commons-net:commons-net:+'
    compile 'net.sf.epsgraphics:epsgraphics:+'
    compile 'commons-cli:commons-cli:+'
    compile 'edu.sc.seis:TauP:+'
}

// path for jar files.
def dependJarCopyTo = 'lib'
jar {
    manifest {
        attributes 'Implementation-Title': 'kibrary', 'Implementation-Version': version
        attributes "Main-Class": "io.github.kensuke1984.kibrary.About"
    }
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

task downloadAndUnzip {
    doLast {
        def downloadedFile = File.createTempFile("kibrary", ".zip")
        download {
            src 'https://github.com/kensuke1984/Kibrary/archive/master.zip'
            dest downloadedFile
        }
        copy {
            from zipTree(downloadedFile)
            into kibraryhome
        }
        delete downloadedFile
    }
}

task setupSourceCodes {
    doLast {
        def master = file(kibraryhome + '/Kibrary-master')
        def src = file(kibraryhome + '/src')
        if (!src.exists()) {
            tasks.downloadAndUnzip.execute()
            file(kibraryhome + '/Kibrary-master/src').renameTo(src)
            delete master
        }
    }
}

// Delete a folder for jar files
task delDependJar {
    doLast {
        delete dependJarCopyTo
    }
}

// Copy jar files into a folder.
task getDependJar(dependsOn: delDependJar) {
    doLast {
        configurations.compile.each {
            def fromJarFile = it.absolutePath
            copy {
                from fromJarFile
                into dependJarCopyTo
            }
        }
        println "----- Downloaded these jar files -----"
        FileCollection copyFiles = files { file(dependJarCopyTo).listFiles() }
        copyFiles.each {File file -> println file.name}
    } 
}

compileJava {
    dependsOn setupSourceCodes
}

clean { delete "${kibraryhome}/src" }
