package io.github.kensuke1984.anisotime;

import io.github.kensuke1984.kibrary.Environment;

import javax.swing.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Properties;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Panel for inputting parameters
 *
 * @author Kensuke Konishi
 * @version 0.3.3
 */
class ParameterInputPanel extends JPanel {

    private final ANISOtimeGUI GUI;

    private JComboBox<String> jComboBoxModel;
    private JLabel jLabelDepth;
    private JLabel jLabelModel;
    private JLabel jLabelMostImportant;
    private JTextField jTextFieldDepth;
    private JTextField jTextFieldMostImportant;

    private static final Properties PARAMETERS = new Properties();
    private static final Path PARAMETER_PATH = Environment.KIBRARY_HOME.resolve(".anisotime_last_parameters");

    /**
     * Creates new form ParameterInputPanel
     */
    ParameterInputPanel(ANISOtimeGUI gui) {
        GUI = gui;
        initComponents();
        readLast();
    }

    private static MouseListener createDescriptionMouseListner(JFrame frame) {
        return new MouseAdapter() {
            Timer timer;

            @Override
            public void mouseExited(MouseEvent e) {
                timer.cancel();
                timer.purge();
                timer = null;
                frame.setVisible(false);
            }

            @Override
            public void mouseEntered(MouseEvent e) {
                timer = new Timer();
                timer.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        frame.setVisible(true);
                    }
                }, 1500);
                Point newLocation = e.getLocationOnScreen();
                newLocation.x += 10;
                newLocation.y += 10;
                frame.setLocation(newLocation);
            }

        };
    }

    void setMode(ComputationMode mode) {
        switch (mode) {
            case EPICENTRAL_DISTANCE:
                jLabelMostImportant.setText("Epicentral distance \u0394 [deg]:");
                jTextFieldMostImportant.setText("60.0");
                jTextFieldMostImportant.grabFocus();
                break;
            case RAY_PARAMETER:
                jLabelMostImportant.setText("Ray parameter p:");
                jTextFieldMostImportant.setText("680.0");
                jTextFieldMostImportant.grabFocus();
                break;
        }
    }

    void changeBorderTitle(String title) {
        setBorder(BorderFactory.createTitledBorder(title));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {
        jLabelMostImportant = new JLabel();
        jLabelModel = new JLabel("Model:");
        jLabelDepth = new JLabel("Depth [km]:");

        jTextFieldMostImportant = GUIInputComponents.createPositiveNumberField("60.0");
        jTextFieldDepth = GUIInputComponents.createPositiveNumberField("100.0");

        changeBorderTitle("Mode:Epicentral Distance  Polarity:P-SV");

        String[] modelTitles = Arrays.stream(InputModel.values()).map(model -> model.name).toArray(String[]::new);
        jComboBoxModel = new JComboBox<>(modelTitles);

        addListners();

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addComponent(jLabelMostImportant).addComponent(jTextFieldMostImportant))
                .addGroup(layout.createSequentialGroup().addComponent(jLabelModel).addComponent(jComboBoxModel))
                .addGroup(layout.createSequentialGroup().addComponent(jLabelDepth)
                        .addComponent(jTextFieldDepth, GroupLayout.PREFERRED_SIZE, 80,
                                GroupLayout.PREFERRED_SIZE)).addGroup(layout.createSequentialGroup()));

        layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addGroup(
                        layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(jLabelMostImportant).addComponent(jTextFieldMostImportant)).addGroup(
                        layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(jComboBoxModel).addComponent(jLabelModel)).addGroup(
                        layout.createParallelGroup(Alignment.BASELINE)
                                .addComponent(jTextFieldDepth).addComponent(jLabelDepth))
                        .addGroup(layout.createParallelGroup(Alignment.BASELINE))));
        GUI.setStructure(VelocityStructure.prem());
        GUI.setEventDepth(100);
    }

    private void addMouseListners() {
        jLabelDepth.addMouseListener(createDescriptionMouseListner(ParameterDescription.createFrameDepth()));
        jLabelMostImportant
                .addMouseListener(createDescriptionMouseListner(ParameterDescription.createFrameRayparameter()));
        jLabelModel.addMouseListener(createDescriptionMouseListner(ParameterDescription.createFrameModel()));
    }

    private void addListners() {
        addMouseListners();

        // Function
        jTextFieldDepth.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = ((JTextField) e.getSource()).getText();
                double value = Double.parseDouble(text);
                GUI.setEventDepth(value);
                setLast("depth", text);
            }
        });
        jTextFieldMostImportant.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                String text = ((JTextField) e.getSource()).getText();
                double value = Double.parseDouble(text);
                GUI.setMostImportant(value);
                setLast("most", text);
            }
        });

        jComboBoxModel.addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(() -> GUI.setStructure(createStructure()));
            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
            }
        });

    }

    private VelocityStructure createStructure() {
        InputModel model = InputModel.titleOf((String) jComboBoxModel.getSelectedItem());
        switch (model) {
            case AK135:
                setLast("structure", "ak135");
                return PolynomialStructure.AK135;
            case ANISOTROPIC_PREM:
                setLast("structure", "prem");
                return PolynomialStructure.PREM;
            case ISOTROPIC_PREM:
                setLast("structure", "iprem");
                return PolynomialStructure.ISO_PREM;
            default:
                setLast("structure", "prem");
                throw new RuntimeException("unexpected");
        }
    }

    private void setLast(String key, String value) {
        PARAMETERS.setProperty(key, value);
        try {
            PARAMETERS.store(Files.newBufferedWriter(PARAMETER_PATH), null);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void readLast() {
        if (Files.exists(PARAMETER_PATH))
            try {
                PARAMETERS.load(Files.newInputStream(PARAMETER_PATH));
                // structure
                if (PARAMETERS.containsKey("structure")) switch (PARAMETERS.get("structure").toString()) {
                    case "prem":
                        SwingUtilities.invokeLater(() -> jComboBoxModel.setSelectedIndex(0));
                        break;
                    case "iprem":
                        SwingUtilities.invokeLater(() -> jComboBoxModel.setSelectedIndex(1));
                        break;
                    case "ak135":
                        SwingUtilities.invokeLater(() -> jComboBoxModel.setSelectedIndex(2));
                        break;
                }
                // depth
                if (PARAMETERS.containsKey("depth")) {
                    String text = PARAMETERS.getProperty("depth");
                    GUI.setEventDepth(Double.parseDouble(text));
                    SwingUtilities.invokeLater(() -> jTextFieldDepth.setText(text));
                }
                // most
                if (PARAMETERS.containsKey("most")) {
                    String text = PARAMETERS.getProperty("most");
                    GUI.setMostImportant(Double.parseDouble(text));
                    SwingUtilities.invokeLater(() -> jTextFieldMostImportant.setText(text));
                }
            } catch (IOException e) {
            }
    }
}
