/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.kensuke1984.anisotime;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 * 
 * GUI for ANISOtime
 * 
 * @version 0.4.1
 * 
 * @author Kensuke Konishi
 */
class ANISOtimeGUI extends javax.swing.JFrame {

	private static final long serialVersionUID = -4093263118460123169L;

	/**
	 * Creates new form TravelTimeGUI
	 */
	ANISOtimeGUI() {
		initComponents();
	}

	private Computation currentComputationMode;

	private RaypathWindow raypathWindow;

	int getNumberOfRaypath() {
		return resultWindow.getN();
	}

	void selectRaypath(int i) {
		raypathWindow.selectPath(i);
	}

	void setRaypathVisible(boolean bool) {
		raypathWindow.setVisible(bool);
	}

	void addPath(double[] x, double[] y) {
		raypathWindow.addPath(x, y);
	}

	void createNewRaypathTabs() {
		if (raypathWindow != null)
			raypathWindow.dispose();
		raypathWindow = new RaypathWindow(this, new RaypathPanel(jPanelParameter.getStructure()));
		resultWindow.clearRows();
	}

	VelocityStructure getStructure() {
		return jPanelParameter.getStructure();
	}

	double getEventR() {
		return jPanelParameter.getEventR();
	}

	/**
	 * @return Epicentral Distance mode: epicentral distance[deg]<br>
	 *         Ray parameter mode: ray parameter<br>
	 */
	double getMostImportant() {
		return jPanelParameter.getMostImportant();
	}

	/**
	 * @return 0(default): All, 1: P-SV, 2: SH
	 */
	synchronized int getPolarity() {
		return jMenuBar1.getPolarity();
	}

	void setMode(ComputationMode mode) {
		jPanelParameter.changeBorderTitle(jMenuBar1.getModeName() + "  " + jMenuBar1.getPoleString());
		jPanelParameter.setMode(mode);
	}

	void changePropertiesVisible() {
		jPanelParameter.changePropertiesVisible();
	}

	synchronized void setPolarity(int i) {
		phaseWindow.setPolarity(i);
		jMenuBar1.setPolarity(i);
		jPanelParameter.changeBorderTitle(jMenuBar1.getModeName() + " " + jMenuBar1.getPoleString());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		setTitle("ANISOtime " + ANISOtime.version + " " + ANISOtime.codename);
		setLocationRelativeTo(null);
		phaseWindow = new PhaseWindow();
		resultWindow = new ResultWindow(this);

		jPanelParameter = new ParameterInputPanel();
		// jPanelTurningInformation = new TurningInformationPanel();
		// jPanelPhase = new PhasePanel();
		buttonCompute = new JButton("Compute");
		buttonShow = new JButton("Save");
		setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		// jMenuItem1 = new JMenuItem();
		jMenuBar1 = new MenuBar(this);
		setJMenuBar(jMenuBar1);
		// textFieldRayParameter.setText("0");

		buttonCompute.addActionListener(this::buttonComputeActionPerformed);

		buttonShow.addActionListener(this::buttonSavePerformed);

		GroupLayout layout = new GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup()
				.addContainerGap()
				.addGroup(layout.createParallelGroup(Alignment.CENTER).addGroup(layout.createSequentialGroup()
						.addGroup(layout.createParallelGroup(Alignment.LEADING).addGroup(layout.createSequentialGroup())
								.addComponent(jPanelParameter, GroupLayout.PREFERRED_SIZE, 300, Short.MAX_VALUE)))
						.addGroup(layout.createSequentialGroup().addGroup(
								layout.createSequentialGroup().addComponent(buttonCompute).addComponent(buttonShow)))
						.addComponent(resultWindow))
				.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jPanelParameter, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
								GroupLayout.PREFERRED_SIZE)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(buttonCompute).addComponent(buttonShow))
						.addComponent(resultWindow, 100, 100, 100).addContainerGap()));

		pack();
		setPolarity(0);
		setLocation(getX() - getWidth() / 2, getY() - getHeight() / 2);
		phaseWindow.setLocation(getX() + getWidth(), getY());
		phaseWindow.setVisible(true);
		// raypathTabs = new RaypathTabs(this);
		// resultWindow.setLocation(getX()-resultWindow.getWidth(), getY());
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @return phases selected at the time considering polarity. When S is
	 *         checked and polarity is ALL, then SH and SV return.
	 */
	synchronized Set<Phase> getSelectedPhaseSet() {
		Set<Phase> phaseSet = phaseWindow.getSelectedPhaseSet();
		switch (getPolarity()) {
		case 0:
			Set<Phase> allSet = new HashSet<>(phaseSet);
			allSet.addAll(phaseSet.stream().map(p -> Phase.create(p.toString(), true)).filter(Phase::isPSV)
					.collect(Collectors.toSet()));
			return allSet;
		case 1:
			return phaseSet.stream().map(p -> Phase.create(p.toString(), true)).filter(Phase::isPSV)
					.collect(Collectors.toSet());
		case 2:
			return phaseSet.stream().filter(p -> !p.isPSV()).collect(Collectors.toSet());
		default:
			throw new RuntimeException("anekusupekutedo");
		}
	}

	/**
	 * when the button "Save" is clicked.
	 */
	private void buttonSavePerformed(java.awt.event.ActionEvent evt) {
		if (currentComputationMode == null) {
			JOptionPane.showMessageDialog(null, "Compute first.");
			return;
		}
		currentComputationMode.outputPath();
	}

	/**
	 * when the button "Compute" is clicked.
	 */
	private void buttonComputeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_buttonComputeActionPerformed
		createNewRaypathTabs();
		switch (selectedMode()) {
		case RAYPARAMETER:
			currentComputationMode = new RayparameterMode(this, new Raypath(getMostImportant(), getStructure()));
			break;
		case EPICENTRAL_DISTANCE:
			currentComputationMode = new EpicentralDistanceMode(this, getSelectedPhaseSet(),
					Math.toRadians(getMostImportant()), getStructure(), getEventR());
			break;
		default:
			JOptionPane.showMessageDialog(null, "sorry not yet.");
			return;
		}
		new Thread(currentComputationMode).start();
	}// GEN-LAST:event_buttonComputeActionPerformed

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ANISOtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ANISOtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ANISOtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ANISOtimeGUI.class.getName()).log(java.util.logging.Level.SEVERE, null,
					ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> new ANISOtimeGUI().setVisible(true));
	}

	void setResult(int i) {
		resultWindow.setColor(i);
	}

	ComputationMode selectedMode() {
		return jMenuBar1.selectedMode();
	}

	void addResult(double epicentralDistance, double depth, String phase, double travelTime, double rayparameter) {
		resultWindow.addRow(epicentralDistance, depth, phase, travelTime, rayparameter);
	}

	synchronized void computed(Raypath raypath) {
		currentRaypath = raypath;
	}

	private Raypath currentRaypath;
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private JButton buttonCompute;
	private JButton buttonShow;
	private MenuBar jMenuBar1;
	private ParameterInputPanel jPanelParameter;
	private ResultWindow resultWindow;
	private PhaseWindow phaseWindow;
	// End of variables declaration//GEN-END:variables
}
